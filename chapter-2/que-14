import itertools

def total_value(selected_items, values):
    return sum(values[i] for i in selected_items)

def is_feasible(selected_items, weights, capacity):
    return sum(weights[i] for i in selected_items) <= capacity

def knapsack(weights, values, capacity):
    num_items = len(weights)
    max_value = 0
    best_combination = []
    
    for r in range(num_items + 1):
        for combination in itertools.combinations(range(num_items), r):
            if is_feasible(combination, weights, capacity):
                current_value = total_value(combination, values)
                if current_value > max_value:
                    max_value = current_value
                    best_combination = combination
    
    return list(best_combination), max_value

weights1 = [2, 3, 1]
values1 = [4, 5, 3]
capacity1 = 4

weights2 = [1, 2, 3, 4]
values2 = [2, 4, 6, 3]
capacity2 = 6

best_combination1, max_value1 = knapsack(weights1, values1, capacity1)
best_combination2, max_value2 = knapsack(weights2, values2, capacity2)

print("Test Case 1:")
print(f"Optimal Selection: {best_combination1}")
print(f"Total Value: {max_value1}")

print(f"Optimal Selection: {best_combination2}")
print(f"Total Value: {max_value2}")
