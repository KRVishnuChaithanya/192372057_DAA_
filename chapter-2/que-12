import itertools
import math

def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2)

def tsp(cities):
    if not cities:
        return float('inf'), []

    start = cities[0]
    other_cities = cities[1:]
    
    min_distance = float('inf')
    best_path = []

    for perm in itertools.permutations(other_cities):
        current_path = [start] + list(perm) + [start]
        current_distance = sum(distance(current_path[i], current_path[i + 1]) for i in range(len(current_path) - 1))

        if current_distance < min_distance:
            min_distance = current_distance
            best_path = current_path

    return min_distance, best_path

cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]
cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]

min_distance1, best_path1 = tsp(cities1)
min_distance2, best_path2 = tsp(cities2)

print("Test Case 1:")
print(f"Shortest Distance: {min_distance1}")
print(f"Shortest Path: {best_path1}")

print(f"Shortest Distance: {min_distance2}")
print(f"Shortest Path: {best_path2}")
