import heapq

def dijkstra_edge_list(n, edges, source, target):
    graph = {i: [] for i in range(n)}
    for u, v, w in edges:
        graph[u].append((v, w))

    dist = [float('inf')] * n
    dist[source] = 0
    visited = set()
    heap = [(0, source)]

    while heap:
        d, u = heapq.heappop(heap)
        if u == target:
            return d

        if u in visited:
            continue
        visited.add(u)

        for v, w in graph[u]:
            if v not in visited and d + w < dist[v]:
                dist[v] = d + w
                heapq.heappush(heap, (dist[v], v))

    return -1  

n3 = 6
edges1 = [(0, 1, 7), (0, 2, 9), (0, 5, 14),
          (1, 2, 10), (1, 3, 15), (2, 3, 11),
          (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source3 = 0
target3 = 4
print(dijkstra_edge_list(n3, edges1, source3, target3)) 

n4 = 5
edges2 = [(0, 1, 10), (0, 4, 3), (1, 2, 2),
          (1, 4, 4), (2, 3, 9), (3, 2, 7),
          (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source4 = 0
target4 = 3
print(dijkstra_edge_list(n4, edges2, source4, target4))  
