import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

def build_huffman_tree(characters, frequencies):
    pq = []
    for char, freq in zip(characters, frequencies):
        heapq.heappush(pq, (freq, Node(char, freq)))

    while len(pq) > 1:
        freq1, node1 = heapq.heappop(pq)
        freq2, node2 = heapq.heappop(pq)
        merged_node = Node(None, freq1 + freq2)
        merged_node.left = node1
        merged_node.right = node2
        heapq.heappush(pq, (freq1 + freq2, merged_node))

    return pq[0][1]

def generate_huffman_codes(root):
    codes = {}

    def dfs(node, code):
        if node:
            if node.char is not None:
                codes[node.char] = code
            dfs(node.left, code + '0')
            dfs(node.right, code + '1')

    dfs(root, '')
    return codes

characters1 = ['a', 'b', 'c', 'd']
frequencies1 = [5, 9, 12, 13]
root1 = build_huffman_tree(characters1, frequencies1)
codes1 = generate_huffman_codes(root1)
print([(char, codes1[char]) for char in characters1])

characters2 = ['f', 'e', 'd', 'c', 'b', 'a']
frequencies2 = [5, 9, 12, 13, 16, 45]
root2 = build_huffman_tree(characters2, frequencies2)
codes2 = generate_huffman_codes(root2)
print([(char, codes2[char]) for char in characters2])
