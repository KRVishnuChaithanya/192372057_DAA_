import math

def closest_pair_of_points(points):
    def distance(p1, p2):
        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

    def closest_pair_rec(px, py):
        n = len(px)
        if n <= 3:
            return brute_force(px)
        
        mid = n // 2
        mid_point = px[mid]

        Qx = px[:mid]
        Rx = px[mid:]

        midpoint = px[mid][0]
        Qy = list(filter(lambda x: x[0] <= midpoint, py))
        Ry = list(filter(lambda x: x[0] > midpoint, py))

        (p1, q1) = closest_pair_rec(Qx, Qy)
        (p2, q2) = closest_pair_rec(Rx, Ry)

        d1 = distance(p1, q1)
        d2 = distance(p2, q2)
        d = min(d1, d2)

        (p3, q3) = closest_split_pair(px, py, d)

        if p3 is None:
            if d1 < d2:
                return (p1, q1)
            else:
                return (p2, q2)
        else:
            d3 = distance(p3, q3)
            if d3 < d:
                return (p3, q3)
            else:
                if d1 < d2:
                    return (p1, q1)
                else:
                    return (p2, q2)

    def closest_split_pair(px, py, delta):
        n = len(px)
        mid_x = px[n // 2][0]

        sy = [p for p in py if mid_x - delta <= p[0] <= mid_x + delta]
        best = delta
        best_pair = (None, None)

        for i in range(len(sy) - 1):
            for j in range(i + 1, min(i + 7, len(sy))):
                p, q = sy[i], sy[j]
                dst = distance(p, q)
                if dst < best:
                    best = dst
                    best_pair = (p, q)

        return best_pair

    def brute_force(points):
        min_dist = float('inf')
        min_pair = (None, None)
        n = len(points)
        for i in range(n):
            for j in range(i + 1, n):
                if distance(points[i], points[j]) < min_dist:
                    min_dist = distance(points[i], points[j])
                    min_pair = (points[i], points[j])
        return min_pair

    px = sorted(points, key=lambda x: x[0])
    py = sorted(points, key=lambda x: x[1])
    return closest_pair_rec(px, py)

# Example usage
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
closest_pair = closest_pair_of_points(points)
print("The closest pair of points is:", closest_pair)
