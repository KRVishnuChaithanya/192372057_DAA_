import numpy as np
def strassen_multiply(A, B):
    n = len(A)
    if n == 1:
        return A * B
    mid = n // 2
    A11 = A[:mid, :mid]
    A12 = A[:mid, mid:]
    A21 = A[mid:, :mid]
    A22 = A[mid:, mid:]
    B11 = B[:mid, :mid]
    B12 = B[:mid, mid:]
    B21 = B[mid:, :mid]
    B22 = B[mid:, mid:]
    P1 = strassen_multiply(A11, B12 - B22)
    P2 = strassen_multiply(A11 + A12, B22)
    P3 = strassen_multiply(A21 + A22, B11)
    P4 = strassen_multiply(A22, B21 - B11)
    P5 = strassen_multiply(A11 + A22, B11 + B22)
    P6 = strassen_multiply(A12 - A22, B21 + B22)
    P7 = strassen_multiply(A11 - A21, B11 + B12)
    C11 = P5 + P4 - P2 + P6
    C12 = P1 + P2
    C21 = P3 + P4
    C22 = P1 + P5 - P3 - P7
    C = np.zeros((n, n))
    C[:mid, :mid] = C11
    C[:mid, mid:] = C12
    C[mid:, :mid] = C21
    C[mid:, mid:] = C22
    
    return C

A = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])
B = np.array([[16, 15, 14, 13], [12, 11, 10, 9], [8, 7, 6, 5], [4, 3, 2, 1]])

print("Matrix A:")
print(A)
print("Matrix B:")
print(B)

C = strassen_multiply(A, B)

print("Resulting Matrix C (A * B):")
print(C)
