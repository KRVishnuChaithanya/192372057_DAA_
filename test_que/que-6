from heapq import heappush, heappop

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = []
    for i, node in enumerate(lists):
        if node:
            heappush(min_heap, (node.val, i, node))
    
    dummy = ListNode()
    current = dummy
    
    while min_heap:
        val, idx, node = heappop(min_heap)
        current.next = ListNode(val)
        current = current.next
        if node.next:
            heappush(min_heap, (node.next.val, idx, node.next))
    
    return dummy.next

def build_list(arr):
    head = current = ListNode()
    for val in arr:
        current.next = ListNode(val)
        current = current.next
    return head.next

def print_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    print(result)

lists = [[1,4,5],[1,3,4],[2,6]]
list_nodes = [build_list(l) for l in lists]
merged_list = mergeKLists(list_nodes)
print_list(merged_list)
