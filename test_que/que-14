class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sort_linked_list(head):
    def merge_sort(head):
        if not head or not head.next:
            return head

        mid = find_middle(head)
        right_head = mid.next
        mid.next = None

        left_sorted = merge_sort(head)
        right_sorted = merge_sort(right_head)

        return merge(left_sorted, right_sorted)

    def find_middle(head):
        slow = head
        fast = head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow

    def merge(left, right):
        dummy = ListNode()
        current = dummy

        while left and right:
            if left.val < right.val:
                current.next = left
                left = left.next
            else:
                current.next = right
                right = right.next
            current = current.next

        current.next = left if left else right

        return dummy.next

    return merge_sort(head)

head = ListNode(4)
head.next = ListNode(2)
head.next.next = ListNode(1)
head.next.next.next = ListNode(3)

sorted_head = sort_linked_list(head)

while sorted_head:
    print(sorted_head.val)
    sorted_head = sorted_head.next
