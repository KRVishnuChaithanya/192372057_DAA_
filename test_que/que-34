import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
    def __lt__(self, other):
        return self.val < other.val

def mergeKLists(lists):
    min_heap = []
    
    for l in lists:
        if l:
            heapq.heappush(min_heap, l)
    
    dummy = ListNode()
    current = dummy
    
    while min_heap:
        smallest_node = heapq.heappop(min_heap)
        current.next = smallest_node
        current = current.next
        
        if smallest_node.next:
            heapq.heappush(min_heap, smallest_node.next)
    
    return dummy.next

def build_linked_lists(arrays):
    linked_lists = []
    for arr in arrays:
        dummy = ListNode()
        current = dummy
        for num in arr:
            current.next = ListNode(num)
            current = current.next
        linked_lists.append(dummy.next)
    return linked_lists

def print_linked_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    print(result)

lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
linked_lists = build_linked_lists(lists)
merged_list = mergeKLists(linked_lists)
print_linked_list(merged_list)
